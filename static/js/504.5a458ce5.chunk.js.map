{"version":3,"file":"static/js/504.5a458ce5.chunk.js","mappings":"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","sources":["webpack://connectify/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogitem/Dialogitem.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/actions/dialogsActions.ts","components/common/FormsControl/FormsControl.tsx","hoc/withAuthRedirect.tsx","utils/validators/validtors.ts","webpack://connectify/./src/components/common/FormsControl/FormsControls.module.css?f75b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__XA5+i\",\"dialogsItems\":\"Dialogs_dialogsItems__lTy72\",\"active\":\"Dialogs_active__INhAe\",\"messages\":\"Dialogs_messages__6xVuw\",\"message\":\"Dialogs_message__vJ8In\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n            <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\nconst DialogItem:React.FC<DialogItemPropsType> = (props ) => {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validtors\";\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLengthText = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n                <form onSubmit={props.handleSubmit}>\r\n                    <div>\r\n                    <Field\r\n                        component={Textarea}\r\n                        placeholder=\"Enter your Message\"\r\n                        name=\"newMessageBody\"\r\n                        validate={[required,maxLengthText]}\r\n                    />\r\n                    <button>Send</button>\r\n                    </div>\r\n                </form>\r\n    );\r\n};\r\n\r\nexport const DialogsFormRedux = reduxForm<FormDataType>({form: 'dialogsForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./Dialogitem/Dialogitem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, DialogsFormRedux, FormDataType} from \"./Message/AddMessageForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props:  DialogsPropsType) => {\r\n    const {sendMessage} = props\r\n    const {dialogs, messages, newMessageBody} = props.dialogsPage;\r\n\r\n    const dialogsElements = dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    const messagesElements = messages.map((m) => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        sendMessage(values.newMessageBody)\r\n    }\r\n\r\n /*   let onSendMessageClick = () => {\r\n        sendMessage();\r\n    }*/\r\n\r\n    let onNewMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.currentTarget.value;\r\n        props.updateNewMessageBody(body)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <DialogsFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\n\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {ReduxStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {DialogsPageType} from \"../../types/dialogsPageTypes\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/actions/dialogsActions\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewMessageBody: (body:any) => void,\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: ReduxStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch ): MapDispatchPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body:any) => {\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        },\r\n        sendMessage:(newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs);\r\n\r\n","import {\r\n    DIALOGS_SEND_MESSAGE,\r\n    DIALOGS_UPDATE_NEW_MESSAGE_BODY,\r\n} from \"./actionTypes\";\r\n\r\n\r\nexport type DialogsActionType = ReturnType<typeof sendMessageCreator> | ReturnType<typeof updateNewMessageBodyCreator>\r\n\r\nexport const sendMessageCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: DIALOGS_SEND_MESSAGE as typeof DIALOGS_SEND_MESSAGE,\r\n        newMessageBody: newMessageBody\r\n    } as const\r\n}\r\n\r\nexport const updateNewMessageBodyCreator = (body: string) => {\r\n    return {\r\n        type: DIALOGS_UPDATE_NEW_MESSAGE_BODY as typeof DIALOGS_UPDATE_NEW_MESSAGE_BODY,\r\n        body: body\r\n    } as const\r\n}","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validtors\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\nexport const FormsControls: React.FC<FormsControlType> = ({\r\n                                                              input,\r\n                                                              meta,\r\n                                                              FormType,\r\n                                                              ...props\r\n                                                          }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            <FormType {...input} {...props}/>\r\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n        return (\r\n            <FormsControls {...props} FormType={\"textarea\"}/>\r\n        )\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return (\r\n        <FormsControls {...props} FormType={\"input\"}/>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        className?: string,\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                className={props?.className}\r\n                {...props}\r\n            />{' '}\r\n            <label className={styles.createFieldText}> {text} </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n};\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\nexport const required = (value: any) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return \"error message\"\r\n    }\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__KaVHj\",\"error\":\"FormsControls_error__VuK27\",\"errorMessage\":\"FormsControls_errorMessage__KVrex\",\"formSummaryError\":\"FormsControls_formSummaryError__FRBhk\"};"],"names":["props","className","s","message","path","id","to","name","maxLengthText","maxLengthCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","sendMessage","dialogsPage","dialogs","messages","dialogsElements","newMessageBody","map","d","messagesElements","m","values","compose","connect","state","dispatch","updateNewMessageBody","body","type","DIALOGS_UPDATE_NEW_MESSAGE_BODY","updateNewMessageBodyCreator","DIALOGS_SEND_MESSAGE","sendMessageCreator","withAuthRedirect","Dialogs","FormsControls","input","meta","FormType","error","touched","finalInputName","styles","Input","createField","validators","text","mapStateToProps","isAuth","auth","Component","restProps","value","maxLength","length"],"sourceRoot":""}