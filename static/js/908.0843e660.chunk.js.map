{"version":3,"file":"static/js/908.0843e660.chunk.js","mappings":"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","sources":["webpack://connectify/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://connectify/./src/components/Dialogs/DialogItems/DialogItems.module.css?30be","components/Dialogs/DialogItems/DialogItems.tsx","webpack://connectify/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://connectify/./src/components/Dialogs/DialogsForm/DialogsForm.module.css?b378","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/DialogContainer/DialogsContainer.tsx","redux/actions/dialogsActions.ts","components/Dialogs/Dialogs.tsx","webpack://connectify/./src/components/common/FormsControl/FormsControls.module.css?f75b","components/common/FormsControl/FormsControl.tsx","hoc/withAuthRedirect.tsx","utils/validators/validtors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Dialogs_root__b9HVO\",\"messages\":\"Dialogs_messages__oPTAP\",\"messages__items\":\"Dialogs_messages__items__hXZjo\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogItems_root__PhiXH\",\"title\":\"DialogItems_title__BVa6f\",\"item\":\"DialogItems_item__8+3G+\",\"item__image\":\"DialogItems_item__image__HCjj5\",\"item__avatar\":\"DialogItems_item__avatar__syEEV\",\"userAndMessage\":\"DialogItems_userAndMessage__Yweri\",\"item__userName\":\"DialogItems_item__userName__ZVVFU\",\"userMessage\":\"DialogItems_userMessage__Yg7Jt\",\"item__link\":\"DialogItems_item__link__lhvAX\",\"item__link_active\":\"DialogItems_item__link_active__O9xkr\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { MyUserType } from \"../../../types/usersTypes\";\nimport styles from \"./DialogItems.module.css\";\n\ntype PropsType = {\n    id: number;\n    dialog: MyUserType;\n};\n\nexport const DialogItems = (props: PropsType) => {\n    const { id, dialog } = props;\n\n    let path = `/dialogs/${id}`;\n\n    return (\n        <div className={styles.root}>\n            <NavLink key={dialog.id} to={path}>\n                <li className={styles.item}>\n                    <div className={styles.item__image}>\n                        <img className={styles.item__avatar} src={dialog.avatar} alt=\"contact-avatar\" />\n                    </div>\n                    <div className={styles.userAndMessage}>\n                        <div className={styles.item__userName}>\n                            <a>{`${dialog.userFirstName} ${dialog.userLastName}`}</a>\n                        </div>\n                        <div className={styles.userMessage}>\n                            'Sed diam nonummy nibh euismod tincidunt ut laoreet dolore'\n                        </div>\n                    </div>\n                </li>\n            </NavLink>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Message_root__OK0xI\",\"message\":\"Message_message__2evaC\"};","import React from \"react\";\nimport styles from \"./Message.module.css\";\n\ntype MessagePropsType = {\n    id: number;\n    message: string;\n};\n\nexport const MessageItem = (props: MessagePropsType) => {\n    const { message } = props;\n    return (\n        <div className={styles.root}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogsForm_root__iRvl0\",\"textareaButtonBlock\":\"DialogsForm_textareaButtonBlock__SBALX\",\"textarea\":\"DialogsForm_textarea__k9Ldd\",\"button\":\"DialogsForm_button__dX-it\"};","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\n\nimport styles from \"./DialogsForm.module.css\";\nimport { Textarea } from \"../../common/FormsControl\";\nimport { maxLengthCreator, required } from \"../../../utils/validators/validtors\";\n\nexport type FormDataType = {\n    newMessageBody: string;\n};\n\nconst maxLengthText = maxLengthCreator(50);\n\nexport const DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <div className={styles.root}>\n            <form onSubmit={props.handleSubmit}>\n                <div className={styles.textareaButtonBlock}>\n                    <Field\n                        component={Textarea}\n                        name=\"newMessageBody\"\n                        placeholder=\"Enter your Message\"\n                        validate={[required, maxLengthText]}\n                        className={styles.textarea}\n                    />\n                    <button className={styles.button}>Send</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport const DialogsFormRedux = reduxForm<FormDataType>({ form: \"dialogsForm\" })(DialogsForm);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\nimport { Dialogs } from \"../Dialogs\";\nimport { addMessageAC } from \"../../../redux/actions/dialogsActions\";\nimport { InitialStateType } from \"../../../redux/reducers/dialogs-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { AppStateType } from \"../../../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType;\n};\n\ntype MapDispatchToProps = {\n    sendMessage: (newMessageBody: string) => void;\n};\n\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToProps;\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n    };\n};\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        sendMessage: addMessageAC,\n    }),\n    withRouter,\n    withAuthRedirect,\n)(Dialogs);\n","import { MESSAGES_ADD } from \"./actionTypes\";\n\nexport type DialogsActionType = ReturnType<typeof addMessageAC>;\n\nexport const addMessageAC = (newMessageBody: string) =>\n    ({\n        type: MESSAGES_ADD,\n        payload: {\n            newMessageBody,\n        },\n    }) as const;\n","import React from \"react\";\nimport styles from \"./Dialogs.module.css\";\nimport { DialogItems } from \"./DialogItems/DialogItems\";\nimport { DialogsPropsType } from \"./DialogContainer/DialogsContainer\";\nimport { FormDataType } from \"./Message/AddMessageForm\";\nimport { MessageItem } from \"./Message/Message\";\nimport { useWindowWidth } from \"../../hooks\";\nimport { DialogsFormRedux } from \"./DialogsForm\";\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    const { sendMessage } = props;\n    const { dialogs, messages } = props.dialogsPage;\n\n    const isDesktop = useWindowWidth(1200);\n\n    const addNewMessage = (values: FormDataType) => {\n        sendMessage(values.newMessageBody);\n    };\n\n    const dialogsElements = dialogs.map((dialog) => {\n        return <DialogItems key={dialog.id} id={dialog.id} dialog={dialog} />;\n    });\n\n    const messagesElements = messages.map((message) => {\n        return <MessageItem key={message.id} id={message.id} message={message.message} />;\n    });\n\n    return (\n        <div className={styles.root}>\n            {!isDesktop && <div className={styles.dialogs__items}>{dialogsElements}</div>}\n            <div className={styles.messages}>\n                <div className={styles.messages__items}>{messagesElements}</div>\n                <DialogsFormRedux onSubmit={addNewMessage} />\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__VGAzy\",\"error\":\"FormsControls_error__WGQ6i\",\"errorMessage\":\"FormsControls_errorMessage__OVv0J\",\"blink1\":\"FormsControls_blink1__tG1CB\",\"checkboxLabel\":\"FormsControls_checkboxLabel__-wutL\",\"createFieldRoot\":\"FormsControls_createFieldRoot__23E2a\",\"createFieldText\":\"FormsControls_createFieldText__KmRzv\"};","import React, { DetailedHTMLProps, TextareaHTMLAttributes } from \"react\";\nimport { Field, WrappedFieldMetaProps } from \"redux-form\";\nimport styles from \"./FormsControls.module.css\";\nimport { FieldValidatorType } from \"../../../utils/validators/validtors\";\n\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\ntype FormsControlType = {\n    input: DefaultInputPropsType;\n    meta: WrappedFieldMetaProps;\n    FormType: string;\n};\nexport const FormsControls: React.FC<FormsControlType> = ({ input, meta, FormType, ...props }) => {\n    const error = meta.touched && meta.error;\n    const finalInputName = `${styles.formControl} ${error ? styles.error : \"\"}`;\n\n    return (\n        <div className={finalInputName}>\n            <FormType {...input} {...props} />\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\n        </div>\n    );\n};\nexport const Textarea: React.FC<FormsControlType> = ({ ...props }) => {\n    return <FormsControls {...props} FormType={\"textarea\"} />;\n};\n\nexport const Input: React.FC<FormsControlType> = ({ ...props }) => {\n    return <FormsControls {...props} FormType={\"input\"} />;\n};\n\nexport function createField<FormKeyType extends string>(\n    placeholder: string | undefined,\n    name: FormKeyType,\n    validators: Array<FieldValidatorType>,\n    component: React.FC<FormsControlType>,\n    props?: {\n        className?: string;\n        type?: string;\n    },\n    text = \"\",\n) {\n    return (\n        <div className={styles.createFieldRoot}>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                validate={validators}\n                component={component}\n                className={props?.className}\n                {...props}\n            />{\" \"}\n            <label className={styles.createFieldText}> {text} </label>\n        </div>\n    );\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>;\n","import React, { ComponentType } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n    };\n};\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let { isAuth, ...restProps } = props;\n\n        if (!isAuth) return <Redirect to=\"/login\" />;\n        return <Component {...(restProps as T)} />;\n    };\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\n\n    return ConnectedRedirectComponent;\n}\n","export type FieldValidatorType = (value: string) => string | undefined;\nexport const required = (value: any) => {\n    if (value) {\n        return undefined;\n    } else {\n        return \"error message\";\n    }\n};\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n};\n"],"names":["DialogItems","props","id","dialog","path","className","styles","to","src","avatar","alt","userFirstName","userLastName","MessageItem","message","maxLengthText","maxLengthCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","compose","connect","state","dialogsPage","sendMessage","newMessageBody","type","MESSAGES_ADD","payload","withRouter","withAuthRedirect","dialogs","messages","isDesktop","useWindowWidth","dialogsElements","map","messagesElements","values","FormsControls","input","meta","FormType","error","touched","finalInputName","Input","createField","validators","text","mapStateToProps","isAuth","auth","Component","restProps","value","maxLength","length"],"sourceRoot":""}