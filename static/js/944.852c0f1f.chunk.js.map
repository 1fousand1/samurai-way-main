{"version":3,"file":"static/js/944.852c0f1f.chunk.js","mappings":"2MAiCMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAhBsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACzE,OAEI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cAC9DH,EAAAA,EAAAA,IAAY,GAAG,aAAa,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,cAC3DL,IAAS,iBAAKM,UAAWC,EAAAA,EAAAA,iBAAhB,UACLP,EADK,QAEV,0BACI,8CAwChB,WAAeQ,EAAAA,EAAAA,KANS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAIa,CAACE,MAAOC,EAAAA,IAAhD,EA5BmC,SAACC,GAChC,IAAOF,EAAiBE,EAAjBF,MAKP,OALwBE,EAAVJ,QAMH,SAAC,KAAD,CAAUK,GAAI,cAGrB,4BACI,mCACA,SAACnB,EAAD,CAAgBK,SAVP,SAACe,GACdJ,EAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,mMC/B7CC,EAA4C,SAAC,GAKO,IAJHC,EAIE,EAJFA,MACAC,EAGE,EAHFA,KACAC,EAEE,EAFFA,SACGT,GACD,YACtDd,EAAQsB,EAAKE,SAAWF,EAAKtB,MAC7ByB,EAAc,UAAMC,EAAAA,EAAAA,YAAN,YAA4B1B,EAAQ0B,EAAAA,EAAAA,MAAe,IAEvE,OACI,iBAAKpB,UAAWmB,EAAhB,WACI,SAACF,GAAD,kBAAcF,GAAWP,IACxBd,IAAS,gBAAKM,UAAWoB,EAAAA,EAAAA,aAAhB,SAAsCJ,EAAKtB,YAIpD2B,EAAuC,SAAC,GAAgB,IAAZb,EAAW,oBAC5D,OACI,SAACM,GAAD,kBAAmBN,GAAnB,IAA0BS,SAAU,eAInCnB,EAAoC,SAAC,GAAgB,IAAZU,EAAW,oBAC7D,OACI,SAACM,GAAD,kBAAmBN,GAAnB,IAA0BS,SAAU,YAIrC,SAASrB,EACZ0B,EACAC,EACAC,EACAC,EACAjB,GAKD,IADCkB,EACF,uDADS,GAEP,OACI,iBAAK1B,UAAWoB,EAAAA,EAAAA,gBAAhB,WACI,SAAC,KAAD,QACIE,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,EACXzB,UAAS,OAAEQ,QAAF,IAAEA,OAAF,EAAEA,EAAOR,WACdQ,IACL,KACH,mBAAOR,UAAWoB,EAAAA,EAAAA,gBAAlB,cAA4CM,EAA5C,Y,2EC3DL,IAAM7B,EAAW,SAAC+B,GACrB,OAAIA,OACA,EAEO,iBAIFC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCTlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,aAAe,oCAAoC,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControl/FormsControl.tsx","utils/validators/validtors.ts","webpack://connectify/./src/components/common/FormsControl/FormsControls.module.css?f75b"],"sourcesContent":["import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControl/FormsControl\";\r\nimport {required} from \"../../utils/validators/validtors\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReduxStateType} from \"../../redux/redux-store\";\r\nimport style from \"../common/FormsControl/FormsControls.module.css\"\r\nimport {loginTC} from \"../../redux/thunks/authThunk\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"Password\"})}\r\n            {createField(\"\",\"rememberMe\",[], Input, {type: \"Checkbox\"}, \"rememberMe\")}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error} </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm)\r\n\r\ntype LoginType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\nconst Login: React.FC<LoginType> = (props) => {\r\n    const {login, isAuth} = props\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>)\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login: loginTC})(Login);","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from \"react\";\r\nimport {Field, WrappedFieldMetaProps} from \"redux-form\";\r\nimport styles from './FormsControls.module.css'\r\nimport {FieldValidatorType} from \"../../../utils/validators/validtors\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\nexport const FormsControls: React.FC<FormsControlType> = ({\r\n                                                              input,\r\n                                                              meta,\r\n                                                              FormType,\r\n                                                              ...props\r\n                                                          }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            <FormType {...input} {...props}/>\r\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n        return (\r\n            <FormsControls {...props} FormType={\"textarea\"}/>\r\n        )\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return (\r\n        <FormsControls {...props} FormType={\"input\"}/>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        className?: string,\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                className={props?.className}\r\n                {...props}\r\n            />{' '}\r\n            <label className={styles.createFieldText}> {text} </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","export type FieldValidatorType = (value: string) => string | undefined\r\nexport const required = (value: any) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return \"error message\"\r\n    }\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__KaVHj\",\"error\":\"FormsControls_error__VuK27\",\"errorMessage\":\"FormsControls_errorMessage__KVrex\",\"formSummaryError\":\"FormsControls_formSummaryError__FRBhk\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","type","className","style","connect","state","isAuth","auth","login","loginTC","props","to","formData","email","password","rememberMe","FormsControls","input","meta","FormType","touched","finalInputName","styles","Textarea","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}