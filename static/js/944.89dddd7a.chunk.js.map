{"version":3,"file":"static/js/944.89dddd7a.chunk.js","mappings":"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","sources":["components/Login/Login.tsx","webpack://connectify/./src/components/common/FormsControl/FormsControls.module.css?f75b","components/common/FormsControl/FormsControl.tsx","utils/validators/validtors.ts","webpack://connectify/./src/components/Login/Login.module.css?3530"],"sourcesContent":["import React, { useState } from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { createField, GetStringKeys, Input } from \"../common/FormsControl/FormsControl\";\nimport { required } from \"../../utils/validators/validtors\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport styles from \"./Login.module.css\";\nimport { loginTC } from \"../../redux/thunks/authThunk\";\nimport { isVisible } from \"@testing-library/user-event/dist/utils\";\n\ntype LoginFormPropsType = {\n    captchaUrl: string | null;\n};\n\nexport type LoginFormDataType = {\n    email: string;\n    password: string;\n    rememberMe: boolean;\n    captcha: string | null;\n};\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormDataType>;\ntype AllSampleFormProps = LoginFormPropsType & InjectedFormProps<LoginFormDataType, LoginFormPropsType>;\n\nconst LoginForm: React.FC<AllSampleFormProps> = ({ handleSubmit, error, captchaUrl }) => {\n    return (\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\n            <div>\n                {createField<LoginFormValuesTypeKeys>(\n                    \"Email\",\n                    \"email\",\n                    [required],\n                    Input,\n                    { className: styles.loginInput },\n                    \"Email Address\",\n                )}\n            </div>\n            <div>\n                {createField<LoginFormValuesTypeKeys>(\n                    \"Password\",\n                    \"password\",\n                    [required],\n                    Input,\n                    { type: \"password\" },\n                    \"Password\",\n                )}\n            </div>\n\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha-image\" />}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input)}\n\n            {error && <div className={styles.formSummaryError}>{error}</div>}\n            <div>\n                <button type=\"submit\" className={styles.loginButton}>\n                    Get Started\n                </button>\n            </div>\n        </form>\n    );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormPropsType>({ form: \"login\" })(LoginForm);\n\ntype LoginType = {\n    login: (email: string, password: string, rememberMe: boolean, captchaUrl: string | null) => void;\n    isAuth: boolean;\n    captchaUrl: string | null;\n};\nconst Login: React.FC<LoginType> = (props) => {\n    const { isAuth, login, captchaUrl } = props;\n\n    const [isVisible, setIsVisible] = useState(false);\n\n    const onShowHandler = () => {\n        setIsVisible(true);\n    };\n\n    const onHideHandler = () => {\n        setIsVisible(false);\n    };\n\n    const onSubmitHandler = (formData: LoginFormDataType) => {\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    };\n\n    if (isAuth) return <Redirect to={\"/profile\"} />;\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.root}>\n                <h1 className={styles.title}>Login</h1>\n                <LoginReduxForm onSubmit={onSubmitHandler} captchaUrl={captchaUrl} />\n            </div>\n            <div className={styles.testLoginInfo}>\n                <p>\n                    To log in get registered\n                    <a href={\"https://social-network.samuraijs.com/\"} target={\"_blank\"} rel=\"noreferrer\">\n                        <span className={styles.link}> here,</span>\n                    </a>\n                </p>\n                <p>\n                    or use common test account credentials:{\" \"}\n                    {!isVisible ? (\n                        <span className={styles.text} onClick={onShowHandler}>\n                            Show data\n                        </span>\n                    ) : (\n                        <span className={styles.text} onClick={onHideHandler}>\n                            Hide data\n                        </span>\n                    )}\n                </p>\n                {isVisible && (\n                    <>\n                        <p className={styles.loginData}>Email: free@samuraijs.com</p>\n                        <p className={styles.loginData}>Password: free</p>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\ntype MapStateToPropsType = {\n    captchaUrl: string | null;\n    isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth,\n        captchaUrl: state.auth.captchaUrl,\n    };\n};\n\nexport default connect(mapStateToProps, { login: loginTC })(Login);\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__VGAzy\",\"error\":\"FormsControls_error__WGQ6i\",\"errorMessage\":\"FormsControls_errorMessage__OVv0J\",\"blink1\":\"FormsControls_blink1__tG1CB\",\"checkboxLabel\":\"FormsControls_checkboxLabel__-wutL\",\"createFieldRoot\":\"FormsControls_createFieldRoot__23E2a\",\"createFieldText\":\"FormsControls_createFieldText__KmRzv\"};","import React, { DetailedHTMLProps, TextareaHTMLAttributes } from \"react\";\nimport { Field, WrappedFieldMetaProps } from \"redux-form\";\nimport styles from \"./FormsControls.module.css\";\nimport { FieldValidatorType } from \"../../../utils/validators/validtors\";\n\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n\ntype FormsControlType = {\n    input: DefaultInputPropsType;\n    meta: WrappedFieldMetaProps;\n    FormType: string;\n};\nexport const FormsControls: React.FC<FormsControlType> = ({ input, meta, FormType, ...props }) => {\n    const error = meta.touched && meta.error;\n    const finalInputName = `${styles.formControl} ${error ? styles.error : \"\"}`;\n\n    return (\n        <div className={finalInputName}>\n            <FormType {...input} {...props} />\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\n        </div>\n    );\n};\nexport const Textarea: React.FC<FormsControlType> = ({ ...props }) => {\n    return <FormsControls {...props} FormType={\"textarea\"} />;\n};\n\nexport const Input: React.FC<FormsControlType> = ({ ...props }) => {\n    return <FormsControls {...props} FormType={\"input\"} />;\n};\n\nexport function createField<FormKeyType extends string>(\n    placeholder: string | undefined,\n    name: FormKeyType,\n    validators: Array<FieldValidatorType>,\n    component: React.FC<FormsControlType>,\n    props?: {\n        className?: string;\n        type?: string;\n    },\n    text = \"\",\n) {\n    return (\n        <div className={styles.createFieldRoot}>\n            <Field\n                placeholder={placeholder}\n                name={name}\n                validate={validators}\n                component={component}\n                className={props?.className}\n                {...props}\n            />{\" \"}\n            <label className={styles.createFieldText}> {text} </label>\n        </div>\n    );\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>;\n","export type FieldValidatorType = (value: string) => string | undefined;\nexport const required = (value: any) => {\n    if (value) {\n        return undefined;\n    } else {\n        return \"error message\";\n    }\n};\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__V+Jhr\",\"root\":\"Login_root__U0zOD\",\"loginInput\":\"Login_loginInput__QJbzF\",\"testLoginInfo\":\"Login_testLoginInfo__NmTGy\",\"title\":\"Login_title__FJKlv\",\"loginForm\":\"Login_loginForm__ZU9Jr\",\"loginCheckbox\":\"Login_loginCheckbox__ZlCTi\",\"loginCheckboxText\":\"Login_loginCheckboxText__AHpd3\",\"formSummaryError\":\"Login_formSummaryError__Dtom3\",\"blink1\":\"Login_blink1__vSsBx\",\"link\":\"Login_link__2WV3U\",\"loginButton\":\"Login_loginButton__I6FQU\",\"text\":\"Login_text__CO65+\",\"loginData\":\"Login_loginData__YykKu\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","className","styles","onSubmit","createField","required","Input","type","src","alt","connect","state","isAuth","auth","login","loginTC","props","useState","isVisible","setIsVisible","to","formData","email","password","rememberMe","captcha","href","target","rel","onClick","FormsControls","input","meta","FormType","touched","finalInputName","Textarea","placeholder","name","validators","component","text","Field","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}